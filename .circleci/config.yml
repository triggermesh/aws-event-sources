version: 2.1

orbs:
  build-tools: circleci/build-tools@2.7.0
  go: circleci/go@1
  gcp-cli: circleci/gcp-cli@1
  helm: circleci/helm@1

jobs:
  checkout:
    executor:
      name: go/default
      tag: '1.15'
    steps:
      - checkout
      - run:
          command: |
            git branch
            git --no-pager log --oneline
      - build-tools/merge-with-parent:
          parent: master
      - run:
          command: |
            git branch
            git --no-pager log --oneline
      - go/mod-download-cached
      - persist_to_workspace:
          root: ~/
          paths:
            - go
            - project

  build:
    executor:
      name: go/default
      tag: '1.15'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: |
            git branch
            git --no-pager log --oneline
      - run:
          name: Building package
          command: make build
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Building docker image
          command: make -j6 cloudbuild-test

  test:
    executor:
      name: go/default
      tag: '1.15'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command: |
            git branch
            git --no-pager log --oneline
      - run:
          name: Run fmt-test
          command: make fmt-test
      - run:
          name: Installing golangci-lint
          command: make install-golangci-lint
      - run:
          name: Run lint
          command: make lint
      - run:
          name: Run test/cover
          command: make cover
          environment:
            TEST_OUTPUT_DIR: /tmp/test-results/
            COVER_OUTPUT_DIR: /tmp/cover-results/
      - store_test_results:
          path: /tmp/test-results/
      - store_artifacts:
          path: /tmp/cover-results/

  publish-image:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          at: ~/
      - gcp-cli/initialize
      - run:
          name: Publishing docker image
          command: IMAGE_SHA=${CIRCLE_SHA1} IMAGE_TAG=${CIRCLE_TAG:-latest} make -j6 cloudbuild

  deploy:
    description: Patches target cluster configuration
    executor:
      name: go/default
      tag: '1.15'
    parameters:
      cluster:
        type: string
      committer_name:
        type: string
        default: TriggerMesh Bot
      committer_email:
        type: string
        default: bot@triggermesh.com
    steps:
      - attach_workspace:
          at: ~/
      - add_ssh_keys
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Configuring git
          command: |
            git config --global user.name '<< parameters.committer_name >>'
            git config --global user.email '<< parameters.committer_email >>'
      - run:
          name: Cloning config repository
          command: git clone --single-branch git@github.com:triggermesh/config.git tmconfig
      - run:
          name: Updating overlays/<< parameters.cluster >>/sources manifests
          working_directory: tmconfig/
          command: |
            for cmd in $(sed -n -e 's/^COMMANDS[[:space:]]*=[[:space:]]*\(.*\)$/\1/p' ~/project/Makefile); do
              sed -i overlays/<< parameters.cluster >>/sources/deployments.yaml \
                -e "s|\(gcr.io/triggermesh/${cmd}:\).*|\1${CIRCLE_TAG:-${CIRCLE_SHA1}}|g"
            done
            git --no-pager diff
      - run:
          name: Committing overlays/<< parameters.cluster >>/sources updates
          working_directory: tmconfig/
          command: |
            git add overlays
            git commit -m "Update overlays/<< parameters.cluster >>/sources aws deployments to '${CIRCLE_TAG:-${CIRCLE_SHA1}}'"
            git push origin master

  publish-chart:
    executor:
      name: gcp-cli/google
    steps:
      - attach_workspace:
          at: ~/
      - gcp-cli/initialize
      - helm/install-helm-client:
          version: v3.2.4
      - run:
          name: Packaging chart
          command: helm package chart/ -d repo/
      - run:
          name: Generating repository index
          command: |
            gsutil cp gs://${GOOGLE_PROJECT_ID}-charts/index.yaml upstream.yaml
            helm repo index --merge upstream.yaml --url https://storage.googleapis.com/${GOOGLE_PROJECT_ID}-charts repo/
      - run:
          name: Publishing charts
          command: gsutil rsync -r repo/  gs://${GOOGLE_PROJECT_ID}-charts/

  release:
    executor:
      name: go/default
      tag: '1.15'
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Building release packages
          command: make release
          environment:
            DIST_DIR: /tmp/dist/
      - run:
          name: Installing github-release tool
          command: go get github.com/meterup/github-release
      - run:
          name: Creating github release
          command: |
            PRE_RELEASE=${CIRCLE_TAG/${CIRCLE_TAG%-rc[0-9]*}/}
            github-release delete -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} 2>/dev/null ||:
            ./hack/release-notes.sh ${CIRCLE_TAG} | github-release release ${PRE_RELEASE:+-p} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -d -
            for f in $(find /tmp/dist -type f); do github-release upload -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -t ${CIRCLE_TAG} -n $(basename ${f}) -f ${f} ; done

workflows:
  build-test-and-publish:
    jobs:
      - checkout:
          filters:
            tags:
              only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      # - build:
      #     context: production
      #     requires:
      #       - checkout
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      # - test:
      #     requires:
      #       - checkout
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      # - publish-image:
      #     context: production
      #     requires:
      #       - build
      #       - test
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         only: master
      # - publish-chart:
      #     context: production
      #     requires:
      #       - publish-image
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         only: master
      # - deploy:
      #     name: update-staging-config
      #     cluster: staging
      #     requires:
      #       - publish-image
      #     filters:
      #       branches:
      #         only: master
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      # - deploy:
      #     name: update-production-config
      #     cluster: prod
      #     requires:
      #       - publish-image
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         ignore: /.*/
      # - release:
      #     context: production
      #     requires:
      #       - publish-image
      #     filters:
      #       tags:
      #         only: /^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      #       branches:
      #         ignore: /.*/
