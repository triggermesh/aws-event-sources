/*
Copyright (c) 2020 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/triggermesh/aws-event-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AWSCognitoSourceLister helps list AWSCognitoSources.
type AWSCognitoSourceLister interface {
	// List lists all AWSCognitoSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCognitoSource, err error)
	// AWSCognitoSources returns an object that can list and get AWSCognitoSources.
	AWSCognitoSources(namespace string) AWSCognitoSourceNamespaceLister
	AWSCognitoSourceListerExpansion
}

// aWSCognitoSourceLister implements the AWSCognitoSourceLister interface.
type aWSCognitoSourceLister struct {
	indexer cache.Indexer
}

// NewAWSCognitoSourceLister returns a new AWSCognitoSourceLister.
func NewAWSCognitoSourceLister(indexer cache.Indexer) AWSCognitoSourceLister {
	return &aWSCognitoSourceLister{indexer: indexer}
}

// List lists all AWSCognitoSources in the indexer.
func (s *aWSCognitoSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCognitoSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCognitoSource))
	})
	return ret, err
}

// AWSCognitoSources returns an object that can list and get AWSCognitoSources.
func (s *aWSCognitoSourceLister) AWSCognitoSources(namespace string) AWSCognitoSourceNamespaceLister {
	return aWSCognitoSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AWSCognitoSourceNamespaceLister helps list and get AWSCognitoSources.
type AWSCognitoSourceNamespaceLister interface {
	// List lists all AWSCognitoSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AWSCognitoSource, err error)
	// Get retrieves the AWSCognitoSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AWSCognitoSource, error)
	AWSCognitoSourceNamespaceListerExpansion
}

// aWSCognitoSourceNamespaceLister implements the AWSCognitoSourceNamespaceLister
// interface.
type aWSCognitoSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AWSCognitoSources in the indexer for a given namespace.
func (s aWSCognitoSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AWSCognitoSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AWSCognitoSource))
	})
	return ret, err
}

// Get retrieves the AWSCognitoSource from the indexer for a given namespace and name.
func (s aWSCognitoSourceNamespaceLister) Get(name string) (*v1alpha1.AWSCognitoSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("awscognitosource"), name)
	}
	return obj.(*v1alpha1.AWSCognitoSource), nil
}
