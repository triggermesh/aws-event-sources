/*
Copyright (c) 2020 TriggerMesh Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package awscodecommit

import (
	"k8s.io/kubernetes/test/e2e/framework"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/codecommit"
	"github.com/aws/aws-sdk-go/service/codecommit/codecommitiface"
	"github.com/onsi/ginkgo"
)

const DefaultBranch = "main"

// CreateRepository creates a CodeCommit repository named after the given
// framework.Framework, with an empty 'main' branch.
func CreateRepository(ccClient codecommitiface.CodeCommitAPI, f *framework.Framework) (arn string, undoFn func()) {
	repoName := "e2e-" + f.UniqueName

	repo := &codecommit.CreateRepositoryInput{
		RepositoryName:        aws.String(repoName),
		RepositoryDescription: aws.String("Generated by the TriggerMesh e2e test suite"),
		Tags: aws.StringMap(map[string]string{
			"k8s_namespace": f.Namespace.Name,
		}),
	}

	repoCreateResp, err := ccClient.CreateRepository(repo)
	if err != nil {
		framework.Failf("Failed to create CodeCommit repository: %s", err)
	}

	undoFn = func() {
		repo := &codecommit.DeleteRepositoryInput{
			RepositoryName: aws.String(repoName),
		}

		ginkgo.By(`deleting CodeCommit repository "`+repoName+`"`, func() {
			if _, err := ccClient.DeleteRepository(repo); err != nil {
				framework.Failf("Failed to delete CodeCommit repository: %s", err)
			}
		})
	}

	return *repoCreateResp.RepositoryMetadata.Arn, undoFn
}

// CreateCommit creates a Git commit in the repository with the given name.
func CreateCommit(ccClient codecommitiface.CodeCommitAPI, repoName string) {
	commit := &codecommit.CreateCommitInput{
		RepositoryName: &repoName,
		BranchName:     aws.String(DefaultBranch),
		AuthorName:     aws.String("TriggerMesh e2e"),
		Email:          aws.String("dev@triggermesh.com"),

		PutFiles: []*codecommit.PutFileEntry{{
			FilePath:    aws.String("README.md"),
			FileContent: []byte("Initialize repo"),
		}},
	}

	if _, err := ccClient.CreateCommit(commit); err != nil {
		framework.Failf("Failed to create Git commit: %s", err)
	}
}
